package main;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JFrame;
import javax.swing.JLabel;

public class NewFrame
 extends JFrame 
 implements MouseListener {

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NewFrame().setVisible(true);
            }
        });
    }

    @Override
    public void mouseClicked(MouseEvent me) {
        for (i = 0; i < 3; i++) {
            for (j = 0; j < 3; j++) {
                if (me.getSource() == cells[i][j]) {
                    is = i;
                    js = j;
                    break;
                }
            }
        }
        if (status[is][js] == Status.EMPTY) {
            status[is][js] = Status.HUMAN;
            cells[is][js].setBackground(yellow);
        }
    }

    @Override
    public void mouseEntered(MouseEvent me) {}

    @Override
    public void mouseExited(MouseEvent me) {}

    @Override
    public void mousePressed(MouseEvent me) {}

    @Override
    public void mouseReleased(MouseEvent me) {}
    
    /**
     * Creates new form NewFrame
     */
    public NewFrame() {
        initComponents();
        for (i = 0; i < 3; i++) {
            for (j = 0; j < 3; j++) {
                cells[i][j] = new JLabel();
                cells[i][j].addMouseListener(this);
                cells[i][j].setBounds((30 * i) + 10, (30 * j) + 10, 20, 20);
                cells[i][j].setBackground(grey);
                cells[i][j].setOpaque(true);
                add(cells[i][j]);
                status[i][j] = Status.EMPTY;
            }
        }
    }

    private void printCells () {
        for (i = 0; i < 3; i++) {
            for (j = 0; j < 3; j++) {
                if (status[i][j] == Status.EMPTY) {
                    cells[i][j].setBackground(grey);
                } else if (status[i][j] == Status.HUMAN) {
                    cells[i][j].setBackground(blue);
                } else if (status[i][j] == Status.ROBOT) {
                    cells[i][j].setBackground(yellow);
                }
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        setBounds(0, 0, 408, 326);
    }// </editor-fold>//GEN-END:initComponents
    
    private static Color blue = new Color(108, 107, 254);
    private static JLabel cells[][] = new JLabel[3][3];
    private static Color grey = new Color(126, 126, 126);
    private static int i = 0, j = 0;
    private static int is = 0, js = 0;
    private static enum Status {EMPTY, HUMAN, ROBOT};
    private static Status status[][] = new Status[3][3];
    private static Color yellow = new Color(129, 131, 3);
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
